/* SmallTalkLexer.java */
/* Generated By:JavaCC: Do not edit this line. SmallTalkLexer.java */
package lexical;

public class SmallTalkLexer implements SmallTalkLexerConstants {
  public static void main(String[] args) throws ParseException {
    SmallTalkLexer lexer;
    if (args.length == 0) {
      System.out.println("Smalltalk Lexical Analyzer: Reading from standard input...");
      lexer = new SmallTalkLexer(System.in);
    } else if (args.length == 1) {
      try {
        lexer = new SmallTalkLexer(new java.io.FileInputStream(args[0]));
      } catch (java.io.FileNotFoundException e) {
        System.out.println("File " + args[0] + " not found.");
        return;
      }
    } else {
      System.out.println("Smalltalk Lexical Analyzer: Usage is one of:");
      System.out.println("         java SmallTalkLexer < inputfile");
      System.out.println("OR");
      System.out.println("         java SmallTalkLexer inputfile");
      return;
    }

    try {
      lexer.Start();
    } catch (ParseException e) {
      System.out.println("Syntax Error: " + e.getMessage());
    }
    System.out.println("$ $");
  }

// Análise léxica principal - MODIFICADA PARA SÓ LER OS TOKENS
  final public void Start() throws ParseException {Token t;
try {
      while(true) {
        t = getNextToken();
        if (t.kind == EOF) break;

        // Imprime o tipo do token e seu conteúdo
        switch(t.kind) {
          case SmallTalkLexerConstants.TOKEN_nil:
            System.out.println("TOKEN_nil " + t.image);
            break;
          case SmallTalkLexerConstants.TOKEN_true:
            System.out.println("TOKEN_true " + t.image);
            break;
          case SmallTalkLexerConstants.TOKEN_false:
            System.out.println("TOKEN_false " + t.image);
            break;
          case SmallTalkLexerConstants.TOKEN_self:
            System.out.println("TOKEN_self " + t.image);
            break;
          case SmallTalkLexerConstants.TOKEN_super:
            System.out.println("TOKEN_super " + t.image);
            break;
          case SmallTalkLexerConstants.TOKEN_identifier:
            System.out.println("TOKEN_identifier " + t.image);
            break;
          case SmallTalkLexerConstants.TOKEN_keyword:
            System.out.println("TOKEN_keyword " + t.image);
            break;
          case SmallTalkLexerConstants.TOKEN_colon:
            System.out.println("TOKEN_colon " + t.image);
            break;
          case SmallTalkLexerConstants.TOKEN_hash:
            System.out.println("TOKEN_hash " + t.image);
            break;
          case SmallTalkLexerConstants.TOKEN_period:
            System.out.println("TOKEN_period " + t.image);
            break;
          case SmallTalkLexerConstants.TOKEN_left_bracket:
            System.out.println("TOKEN_left_bracket " + t.image);
            break;
          case SmallTalkLexerConstants.TOKEN_right_bracket:
            System.out.println("TOKEN_right_bracket " + t.image);
            break;
          case SmallTalkLexerConstants.TOKEN_left_paren:
            System.out.println("TOKEN_left_paren " + t.image);
            break;
          case SmallTalkLexerConstants.TOKEN_right_paren:
            System.out.println("TOKEN_right_paren " + t.image);
            break;
          case SmallTalkLexerConstants.TOKEN_semicolon:
            System.out.println("TOKEN_semicolon " + t.image);
            break;
          case SmallTalkLexerConstants.TOKEN_comma:
            System.out.println("TOKEN_comma " + t.image);
            break;
          case SmallTalkLexerConstants.TOKEN_pipe:
            System.out.println("TOKEN_pipe " + t.image);
            break;
          case SmallTalkLexerConstants.TOKEN_array_begin:
            System.out.println("TOKEN_array_begin " + t.image);
            break;
          case SmallTalkLexerConstants.TOKEN_left_brace:
            System.out.println("TOKEN_left_brace " + t.image);
            break;
          case SmallTalkLexerConstants.TOKEN_right_brace:
            System.out.println("TOKEN_right_brace " + t.image);
            break;
          case SmallTalkLexerConstants.TOKEN_binary_selector:
            System.out.println("TOKEN_binary_selector " + t.image);
            break;
          case SmallTalkLexerConstants.TOKEN_return_operator:
            System.out.println("TOKEN_return_operator " + t.image);
            break;
          case SmallTalkLexerConstants.TOKEN_assignment_operator:
            System.out.println("TOKEN_assignment_operator " + t.image);
            break;
          case SmallTalkLexerConstants.TOKEN_decimal_integer:
            System.out.println("TOKEN_decimal_integer " + t.image);
            break;
          case SmallTalkLexerConstants.TOKEN_radix_integer:
            System.out.println("TOKEN_radix_integer " + t.image);
            break;
          case SmallTalkLexerConstants.TOKEN_float:
            System.out.println("TOKEN_float " + t.image);
            break;
          case SmallTalkLexerConstants.TOKEN_scaled_decimal:
            System.out.println("TOKEN_scaled_decimal " + t.image);
            break;
          case SmallTalkLexerConstants.TOKEN_quoted_character:
            System.out.println("TOKEN_quoted_character " + t.image);
            break;
          case SmallTalkLexerConstants.TOKEN_quoted_string:
            System.out.println("TOKEN_quoted_string " + t.image);
            break;
          case SmallTalkLexerConstants.TOKEN_hashed_string:
            System.out.println("TOKEN_hashed_string " + t.image);
            break;
          case SmallTalkLexerConstants.TOKEN_quoted_unary_selector:
            System.out.println("TOKEN_quoted_unary_selector " + t.image);
            break;
          case SmallTalkLexerConstants.TOKEN_quoted_binary_selector:
            System.out.println("TOKEN_quoted_binary_selector " + t.image);
            break;
          case SmallTalkLexerConstants.TOKEN_quoted_keyword_selector:
            System.out.println("TOKEN_quoted_keyword_selector " + t.image);
            break;
          case SmallTalkLexerConstants.TOKEN_subclass:
            System.out.println("TOKEN_subclass " + t.image);
            break;
          default:
            System.out.println("TOKEN_unknown");
        }
      }
    } catch (Exception e) {
      System.out.println("Lexical error: " + e.getMessage());
    }
}

  /** Generated Token Manager. */
  public SmallTalkLexerTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {};
	}

  /** Constructor with InputStream. */
  public SmallTalkLexer(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SmallTalkLexer(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new SmallTalkLexerTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SmallTalkLexer(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new SmallTalkLexerTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new SmallTalkLexerTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
  }

  /** Constructor with generated Token Manager. */
  public SmallTalkLexer(SmallTalkLexerTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
  }

  /** Reinitialise. */
  public void ReInit(SmallTalkLexerTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[40];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 0; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 40; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
