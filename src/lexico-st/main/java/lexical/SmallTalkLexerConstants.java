/* Generated By:JavaCC: Do not edit this line. SmallTalkLexerConstants.java */
package lexical;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface SmallTalkLexerConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int TOKEN_white_space = 1;
  /** RegularExpression Id. */
  int TOKEN_horizontal_tab = 2;
  /** RegularExpression Id. */
  int TOKEN_new_line = 3;
  /** RegularExpression Id. */
  int TOKEN_carriage_return = 4;
  /** RegularExpression Id. */
  int TOKEN_comment = 5;
  /** RegularExpression Id. */
  int TOKEN_nil = 6;
  /** RegularExpression Id. */
  int TOKEN_true = 7;
  /** RegularExpression Id. */
  int TOKEN_false = 8;
  /** RegularExpression Id. */
  int TOKEN_self = 9;
  /** RegularExpression Id. */
  int TOKEN_super = 10;
  /** RegularExpression Id. */
  int TOKEN_identifier = 11;
  /** RegularExpression Id. */
  int TOKEN_keyword = 12;
  /** RegularExpression Id. */
  int TOKEN_colon = 13;
  /** RegularExpression Id. */
  int TOKEN_hash = 14;
  /** RegularExpression Id. */
  int TOKEN_period = 15;
  /** RegularExpression Id. */
  int TOKEN_left_bracket = 16;
  /** RegularExpression Id. */
  int TOKEN_right_bracket = 17;
  /** RegularExpression Id. */
  int TOKEN_left_paren = 18;
  /** RegularExpression Id. */
  int TOKEN_right_paren = 19;
  /** RegularExpression Id. */
  int TOKEN_semicolon = 20;
  /** RegularExpression Id. */
  int TOKEN_comma = 21;
  /** RegularExpression Id. */
  int TOKEN_pipe = 22;
  /** RegularExpression Id. */
  int TOKEN_array_begin = 23;
  /** RegularExpression Id. */
  int TOKEN_left_brace = 24;
  /** RegularExpression Id. */
  int TOKEN_right_brace = 25;
  /** RegularExpression Id. */
  int TOKEN_subclass = 26;
  /** RegularExpression Id. */
  int TOKEN_binary_selector = 27;
  /** RegularExpression Id. */
  int TOKEN_return_operator = 28;
  /** RegularExpression Id. */
  int TOKEN_assignment_operator = 29;
  /** RegularExpression Id. */
  int TOKEN_decimal_integer = 30;
  /** RegularExpression Id. */
  int TOKEN_radix_integer = 31;
  /** RegularExpression Id. */
  int TOKEN_float = 32;
  /** RegularExpression Id. */
  int TOKEN_scaled_decimal = 33;
  /** RegularExpression Id. */
  int TOKEN_quoted_character = 34;
  /** RegularExpression Id. */
  int TOKEN_quoted_string = 35;
  /** RegularExpression Id. */
  int TOKEN_hashed_string = 36;
  /** RegularExpression Id. */
  int TOKEN_quoted_unary_selector = 37;
  /** RegularExpression Id. */
  int TOKEN_quoted_binary_selector = 38;
  /** RegularExpression Id. */
  int TOKEN_quoted_keyword_selector = 39;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<TOKEN_comment>",
    "\"nil\"",
    "\"true\"",
    "\"false\"",
    "\"self\"",
    "\"super\"",
    "<TOKEN_identifier>",
    "<TOKEN_keyword>",
    "\":\"",
    "\"#\"",
    "\".\"",
    "\"[\"",
    "\"]\"",
    "\"(\"",
    "\")\"",
    "\";\"",
    "\",\"",
    "\"|\"",
    "\"#(\"",
    "\"{\"",
    "\"}\"",
    "\" subclass:\"",
    "<TOKEN_binary_selector>",
    "\"^\"",
    "\":=\"",
    "<TOKEN_decimal_integer>",
    "<TOKEN_radix_integer>",
    "<TOKEN_float>",
    "<TOKEN_scaled_decimal>",
    "<TOKEN_quoted_character>",
    "<TOKEN_quoted_string>",
    "<TOKEN_hashed_string>",
    "<TOKEN_quoted_unary_selector>",
    "<TOKEN_quoted_binary_selector>",
    "<TOKEN_quoted_keyword_selector>",
  };

}
