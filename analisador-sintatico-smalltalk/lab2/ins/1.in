TOKEN_identifier Object
TOKEN_subclass  subclass:
TOKEN_identifier Ponto
TOKEN_left_bracket [
TOKEN_pipe |
TOKEN_identifier x
TOKEN_identifier y
TOKEN_pipe |
TOKEN_identifier x
TOKEN_left_bracket [
TOKEN_return_operator ^
TOKEN_identifier x
TOKEN_right_bracket ]
TOKEN_keyword x:
TOKEN_identifier umValor
TOKEN_left_bracket [
TOKEN_identifier x
TOKEN_assignment_operator :=
TOKEN_identifier umValor
TOKEN_right_bracket ]
TOKEN_identifier y
TOKEN_left_bracket [
TOKEN_return_operator ^
TOKEN_identifier y
TOKEN_right_bracket ]
TOKEN_keyword y:
TOKEN_identifier umValor
TOKEN_left_bracket [
TOKEN_identifier y
TOKEN_assignment_operator :=
TOKEN_identifier umValor
TOKEN_right_bracket ]
TOKEN_keyword x:
TOKEN_identifier valorX
TOKEN_keyword y:
TOKEN_identifier valorY
TOKEN_left_bracket [
TOKEN_identifier x
TOKEN_assignment_operator :=
TOKEN_identifier valorX
TOKEN_period .
TOKEN_identifier y
TOKEN_assignment_operator :=
TOKEN_identifier valorY
TOKEN_period .
TOKEN_return_operator ^
TOKEN_self self
TOKEN_right_bracket ]
TOKEN_right_bracket ]
TOKEN_identifier Object
TOKEN_subclass  subclass:
TOKEN_identifier Programa
TOKEN_left_bracket [
TOKEN_keyword func:
TOKEN_identifier v
TOKEN_keyword n:
TOKEN_identifier n
TOKEN_left_bracket [
TOKEN_pipe |
TOKEN_identifier res
TOKEN_identifier temp
TOKEN_identifier i
TOKEN_pipe |
TOKEN_identifier n
TOKEN_binary_selector <=
TOKEN_decimal_integer 0
TOKEN_keyword ifTrue:
TOKEN_left_bracket [
TOKEN_return_operator ^
TOKEN_float 1.0
TOKEN_right_bracket ]
TOKEN_period .
TOKEN_identifier n
TOKEN_binary_selector =
TOKEN_decimal_integer 1
TOKEN_keyword ifTrue:
TOKEN_left_bracket [
TOKEN_return_operator ^
TOKEN_float 1.01
TOKEN_binary_selector +
TOKEN_left_paren (
TOKEN_left_paren (
TOKEN_identifier v
TOKEN_keyword at:
TOKEN_decimal_integer 1
TOKEN_right_paren )
TOKEN_identifier x
TOKEN_binary_selector /
TOKEN_float 1.0e2
TOKEN_right_paren )
TOKEN_binary_selector +
TOKEN_left_paren (
TOKEN_left_paren (
TOKEN_identifier v
TOKEN_keyword at:
TOKEN_decimal_integer 1
TOKEN_right_paren )
TOKEN_identifier y
TOKEN_binary_selector /
TOKEN_float 0.1e-2
TOKEN_right_paren )
TOKEN_right_bracket ]
TOKEN_period .
TOKEN_identifier res
TOKEN_assignment_operator :=
TOKEN_float 0.25e-13
TOKEN_period .
TOKEN_identifier i
TOKEN_assignment_operator :=
TOKEN_identifier n
TOKEN_period .
TOKEN_left_bracket [
TOKEN_identifier i
TOKEN_binary_selector >=
TOKEN_decimal_integer 1
TOKEN_right_bracket ]
TOKEN_keyword whileTrue:
TOKEN_left_bracket [
TOKEN_left_paren (
TOKEN_left_paren (
TOKEN_identifier v
TOKEN_keyword at:
TOKEN_identifier i
TOKEN_right_paren )
TOKEN_identifier x
TOKEN_binary_selector >
TOKEN_decimal_integer 0
TOKEN_right_paren )
TOKEN_keyword ifTrue:
TOKEN_left_bracket [
TOKEN_identifier temp
TOKEN_assignment_operator :=
TOKEN_left_paren (
TOKEN_left_paren (
TOKEN_identifier v
TOKEN_keyword at:
TOKEN_identifier i
TOKEN_right_paren )
TOKEN_identifier y
TOKEN_binary_selector *
TOKEN_left_paren (
TOKEN_identifier v
TOKEN_keyword at:
TOKEN_identifier i
TOKEN_right_paren )
TOKEN_identifier x
TOKEN_right_paren )
TOKEN_binary_selector \\
TOKEN_decimal_integer 123
TOKEN_period .
TOKEN_identifier temp
TOKEN_binary_selector <
TOKEN_float 0.0
TOKEN_keyword ifTrue:
TOKEN_left_bracket [
TOKEN_identifier res
TOKEN_assignment_operator :=
TOKEN_identifier res
TOKEN_binary_selector -
TOKEN_left_paren (
TOKEN_identifier res
TOKEN_binary_selector *
TOKEN_float 2.0e-2
TOKEN_binary_selector +
TOKEN_left_paren (
TOKEN_self self
TOKEN_keyword func:
TOKEN_identifier v
TOKEN_keyword n:
TOKEN_left_paren (
TOKEN_identifier n
TOKEN_binary_selector -
TOKEN_decimal_integer 1
TOKEN_right_paren )
TOKEN_right_paren )
TOKEN_binary_selector *
TOKEN_identifier temp
TOKEN_right_paren )
TOKEN_right_bracket ]
TOKEN_keyword ifFalse:
TOKEN_left_bracket [
TOKEN_identifier res
TOKEN_assignment_operator :=
TOKEN_identifier res
TOKEN_binary_selector +
TOKEN_left_paren (
TOKEN_identifier res
TOKEN_binary_selector *
TOKEN_float 0.3e3
TOKEN_binary_selector +
TOKEN_left_paren (
TOKEN_self self
TOKEN_keyword func:
TOKEN_identifier v
TOKEN_keyword n:
TOKEN_left_paren (
TOKEN_identifier n
TOKEN_binary_selector -
TOKEN_decimal_integer 2
TOKEN_right_paren )
TOKEN_right_paren )
TOKEN_binary_selector *
TOKEN_identifier temp
TOKEN_right_paren )
TOKEN_period .
TOKEN_identifier Transcript
TOKEN_keyword show:
TOKEN_quoted_string 'Estranho, ne?'
TOKEN_semicolon ;
TOKEN_identifier cr
TOKEN_right_bracket ]
TOKEN_period .
TOKEN_identifier i
TOKEN_assignment_operator :=
TOKEN_identifier i
TOKEN_binary_selector -
TOKEN_decimal_integer 1
TOKEN_right_bracket ]
TOKEN_keyword ifFalse:
TOKEN_left_bracket [
TOKEN_return_operator ^
TOKEN_identifier res
TOKEN_right_bracket ]
TOKEN_right_bracket ]
TOKEN_period .
TOKEN_return_operator ^
TOKEN_identifier res
TOKEN_right_bracket ]
TOKEN_identifier executarTeste
TOKEN_left_bracket [
TOKEN_pipe |
TOKEN_identifier pontos
TOKEN_identifier resultado
TOKEN_pipe |
TOKEN_identifier pontos
TOKEN_assignment_operator :=
TOKEN_identifier Array
TOKEN_keyword new:
TOKEN_decimal_integer 3
TOKEN_period .
TOKEN_identifier pontos
TOKEN_keyword at:
TOKEN_decimal_integer 1
TOKEN_keyword put:
TOKEN_left_paren (
TOKEN_identifier Ponto
TOKEN_identifier new
TOKEN_keyword x:
TOKEN_decimal_integer 10
TOKEN_keyword y:
TOKEN_decimal_integer 20
TOKEN_right_paren )
TOKEN_period .
TOKEN_identifier pontos
TOKEN_keyword at:
TOKEN_decimal_integer 2
TOKEN_keyword put:
TOKEN_left_paren (
TOKEN_identifier Ponto
TOKEN_identifier new
TOKEN_keyword x:
TOKEN_decimal_integer 5
TOKEN_keyword y:
TOKEN_decimal_integer 15
TOKEN_right_paren )
TOKEN_period .
TOKEN_identifier pontos
TOKEN_keyword at:
TOKEN_decimal_integer 3
TOKEN_keyword put:
TOKEN_left_paren (
TOKEN_identifier Ponto
TOKEN_identifier new
TOKEN_keyword x:
TOKEN_decimal_integer 8
TOKEN_keyword y:
TOKEN_decimal_integer 25
TOKEN_right_paren )
TOKEN_period .
TOKEN_identifier resultado
TOKEN_assignment_operator :=
TOKEN_self self
TOKEN_keyword func:
TOKEN_identifier pontos
TOKEN_keyword n:
TOKEN_decimal_integer 3
TOKEN_period .
TOKEN_identifier Transcript
TOKEN_keyword show:
TOKEN_quoted_string 'Resultado da função: '
TOKEN_semicolon ;
TOKEN_keyword show:
TOKEN_identifier resultado
TOKEN_identifier printString
TOKEN_semicolon ;
TOKEN_identifier cr
TOKEN_period .
TOKEN_right_bracket ]
TOKEN_right_bracket ]
TOKEN_identifier Transcript
TOKEN_identifier cr
TOKEN_semicolon ;
TOKEN_keyword show:
TOKEN_quoted_string '===== Executando programa ====='
TOKEN_semicolon ;
TOKEN_identifier cr
TOKEN_period .
TOKEN_identifier programa
TOKEN_assignment_operator :=
TOKEN_identifier Programa
TOKEN_identifier new
TOKEN_period .
TOKEN_identifier programa
TOKEN_identifier executarTeste
TOKEN_period .
TOKEN_identifier Transcript
TOKEN_identifier cr
TOKEN_semicolon ;
TOKEN_keyword show:
TOKEN_quoted_string '===== Fim da execução ====='
TOKEN_semicolon ;
TOKEN_identifier cr
TOKEN_period .
$ $
