TOKEN_identifier Object
TOKEN_subclass  subclass:
TOKEN_identifier MinhaClasse
TOKEN_left_bracket [
TOKEN_keyword F50:
TOKEN_identifier n
TOKEN_keyword com:
TOKEN_identifier a
TOKEN_keyword e:
TOKEN_identifier b
TOKEN_left_bracket [
TOKEN_pipe |
TOKEN_identifier sum
TOKEN_identifier temp
TOKEN_identifier x
TOKEN_identifier y
TOKEN_identifier d
TOKEN_identifier step
TOKEN_identifier v
TOKEN_identifier r
TOKEN_identifier tail
TOKEN_pipe |
TOKEN_identifier sum
TOKEN_assignment_operator :=
TOKEN_decimal_integer 0
TOKEN_period .
TOKEN_identifier temp
TOKEN_assignment_operator :=
TOKEN_left_paren (
TOKEN_identifier a
TOKEN_binary_selector *
TOKEN_identifier b
TOKEN_right_paren )
TOKEN_binary_selector -
TOKEN_left_paren (
TOKEN_left_paren (
TOKEN_identifier a
TOKEN_binary_selector +
TOKEN_identifier b
TOKEN_right_paren )
TOKEN_binary_selector /
TOKEN_decimal_integer 2
TOKEN_right_paren )
TOKEN_period .
TOKEN_left_paren (
TOKEN_left_paren (
TOKEN_identifier n
TOKEN_binary_selector \\
TOKEN_decimal_integer 2
TOKEN_right_paren )
TOKEN_binary_selector =
TOKEN_decimal_integer 0
TOKEN_right_paren )
TOKEN_keyword and:
TOKEN_left_bracket [
TOKEN_left_paren (
TOKEN_identifier a
TOKEN_binary_selector +
TOKEN_identifier b
TOKEN_right_paren )
TOKEN_binary_selector >
TOKEN_decimal_integer 0
TOKEN_right_bracket ]
TOKEN_keyword ifTrue:
TOKEN_left_bracket [
TOKEN_identifier x
TOKEN_assignment_operator :=
TOKEN_left_paren (
TOKEN_identifier n
TOKEN_binary_selector *
TOKEN_identifier n
TOKEN_right_paren )
TOKEN_binary_selector +
TOKEN_left_paren (
TOKEN_identifier a
TOKEN_binary_selector *
TOKEN_decimal_integer 2
TOKEN_right_paren )
TOKEN_period .
TOKEN_left_bracket [
TOKEN_pipe |
TOKEN_identifier y
TOKEN_pipe |
TOKEN_identifier y
TOKEN_assignment_operator :=
TOKEN_identifier x
TOKEN_binary_selector -
TOKEN_left_paren (
TOKEN_identifier b
TOKEN_binary_selector /
TOKEN_decimal_integer 2
TOKEN_right_paren )
TOKEN_period .
TOKEN_identifier sum
TOKEN_assignment_operator :=
TOKEN_identifier y
TOKEN_binary_selector +
TOKEN_left_paren (
TOKEN_self self
TOKEN_keyword helper:
TOKEN_identifier a
TOKEN_keyword com:
TOKEN_identifier b
TOKEN_keyword e:
TOKEN_identifier n
TOKEN_right_paren )
TOKEN_right_bracket ]
TOKEN_identifier value
TOKEN_right_bracket ]
TOKEN_period .
TOKEN_left_paren (
TOKEN_left_paren (
TOKEN_identifier a
TOKEN_binary_selector *
TOKEN_identifier a
TOKEN_binary_selector +
TOKEN_identifier b
TOKEN_binary_selector *
TOKEN_identifier b
TOKEN_right_paren )
TOKEN_binary_selector \\
TOKEN_decimal_integer 3
TOKEN_right_paren )
TOKEN_binary_selector =
TOKEN_decimal_integer 0
TOKEN_keyword ifTrue:
TOKEN_left_bracket [
TOKEN_identifier y
TOKEN_assignment_operator :=
TOKEN_left_paren (
TOKEN_identifier a
TOKEN_binary_selector +
TOKEN_identifier b
TOKEN_right_paren )
TOKEN_binary_selector *
TOKEN_left_paren (
TOKEN_identifier a
TOKEN_binary_selector -
TOKEN_identifier b
TOKEN_right_paren )
TOKEN_period .
TOKEN_left_bracket [
TOKEN_identifier sum
TOKEN_assignment_operator :=
TOKEN_identifier sum
TOKEN_binary_selector +
TOKEN_identifier y
TOKEN_right_bracket ]
TOKEN_identifier value
TOKEN_right_bracket ]
TOKEN_keyword ifFalse:
TOKEN_left_bracket [
TOKEN_identifier d
TOKEN_assignment_operator :=
TOKEN_left_paren (
TOKEN_left_paren (
TOKEN_identifier a
TOKEN_binary_selector +
TOKEN_identifier b
TOKEN_right_paren )
TOKEN_binary_selector *
TOKEN_left_paren (
TOKEN_identifier a
TOKEN_binary_selector +
TOKEN_identifier b
TOKEN_right_paren )
TOKEN_right_paren )
TOKEN_binary_selector /
TOKEN_left_paren (
TOKEN_identifier n
TOKEN_binary_selector +
TOKEN_decimal_integer 1
TOKEN_right_paren )
TOKEN_period .
TOKEN_left_bracket [
TOKEN_identifier sum
TOKEN_assignment_operator :=
TOKEN_identifier sum
TOKEN_binary_selector -
TOKEN_identifier d
TOKEN_right_bracket ]
TOKEN_identifier value
TOKEN_right_bracket ]
TOKEN_period .
TOKEN_left_bracket [
TOKEN_identifier n
TOKEN_binary_selector >
TOKEN_decimal_integer 1
TOKEN_right_bracket ]
TOKEN_keyword whileTrue:
TOKEN_left_bracket [
TOKEN_identifier step
TOKEN_assignment_operator :=
TOKEN_left_paren (
TOKEN_left_paren (
TOKEN_identifier n
TOKEN_binary_selector \\
TOKEN_decimal_integer 3
TOKEN_right_paren )
TOKEN_binary_selector +
TOKEN_decimal_integer 1
TOKEN_right_paren )
TOKEN_period .
TOKEN_left_bracket [
TOKEN_identifier sum
TOKEN_assignment_operator :=
TOKEN_identifier sum
TOKEN_binary_selector +
TOKEN_left_paren (
TOKEN_identifier n
TOKEN_binary_selector *
TOKEN_identifier temp
TOKEN_right_paren )
TOKEN_binary_selector -
TOKEN_identifier step
TOKEN_binary_selector +
TOKEN_left_paren (
TOKEN_identifier a
TOKEN_binary_selector +
TOKEN_identifier b
TOKEN_right_paren )
TOKEN_period .
TOKEN_identifier n
TOKEN_assignment_operator :=
TOKEN_identifier n
TOKEN_binary_selector -
TOKEN_left_paren (
TOKEN_left_paren (
TOKEN_identifier n
TOKEN_binary_selector \\
TOKEN_decimal_integer 2
TOKEN_right_paren )
TOKEN_binary_selector +
TOKEN_decimal_integer 1
TOKEN_right_paren )
TOKEN_right_bracket ]
TOKEN_identifier value
TOKEN_right_bracket ]
TOKEN_period .
TOKEN_identifier n
TOKEN_assignment_operator :=
TOKEN_decimal_integer 0
TOKEN_period .
TOKEN_left_bracket [
TOKEN_identifier n
TOKEN_binary_selector <
TOKEN_decimal_integer 4
TOKEN_right_bracket ]
TOKEN_keyword whileTrue:
TOKEN_left_bracket [
TOKEN_identifier v
TOKEN_assignment_operator :=
TOKEN_left_paren (
TOKEN_identifier n
TOKEN_binary_selector *
TOKEN_identifier n
TOKEN_right_paren )
TOKEN_binary_selector -
TOKEN_left_paren (
TOKEN_left_paren (
TOKEN_identifier a
TOKEN_binary_selector -
TOKEN_identifier b
TOKEN_right_paren )
TOKEN_binary_selector *
TOKEN_left_paren (
TOKEN_identifier n
TOKEN_binary_selector +
TOKEN_decimal_integer 1
TOKEN_right_paren )
TOKEN_right_paren )
TOKEN_period .
TOKEN_left_bracket [
TOKEN_identifier sum
TOKEN_assignment_operator :=
TOKEN_identifier sum
TOKEN_binary_selector +
TOKEN_identifier v
TOKEN_right_bracket ]
TOKEN_identifier value
TOKEN_period .
TOKEN_identifier n
TOKEN_assignment_operator :=
TOKEN_identifier n
TOKEN_binary_selector +
TOKEN_decimal_integer 1
TOKEN_right_bracket ]
TOKEN_period .
TOKEN_identifier sum
TOKEN_binary_selector >
TOKEN_decimal_integer 100
TOKEN_keyword ifTrue:
TOKEN_left_bracket [
TOKEN_left_bracket [
TOKEN_identifier r
TOKEN_assignment_operator :=
TOKEN_left_paren (
TOKEN_left_paren (
TOKEN_identifier sum
TOKEN_binary_selector /
TOKEN_decimal_integer 3
TOKEN_right_paren )
TOKEN_binary_selector -
TOKEN_left_paren (
TOKEN_self self
TOKEN_keyword F50:
TOKEN_identifier n
TOKEN_binary_selector +
TOKEN_decimal_integer 1
TOKEN_keyword com:
TOKEN_identifier a
TOKEN_binary_selector -
TOKEN_decimal_integer 1
TOKEN_keyword e:
TOKEN_identifier b
TOKEN_binary_selector +
TOKEN_decimal_integer 2
TOKEN_right_paren )
TOKEN_right_paren )
TOKEN_binary_selector *
TOKEN_decimal_integer 2
TOKEN_binary_selector +
TOKEN_left_paren (
TOKEN_identifier a
TOKEN_binary_selector \\
TOKEN_decimal_integer 3
TOKEN_right_paren )
TOKEN_period .
TOKEN_identifier sum
TOKEN_assignment_operator :=
TOKEN_identifier sum
TOKEN_binary_selector +
TOKEN_identifier r
TOKEN_right_bracket ]
TOKEN_identifier value
TOKEN_right_bracket ]
TOKEN_period .
TOKEN_identifier tail
TOKEN_assignment_operator :=
TOKEN_left_paren (
TOKEN_left_paren (
TOKEN_identifier a
TOKEN_binary_selector *
TOKEN_identifier b
TOKEN_right_paren )
TOKEN_binary_selector \\
TOKEN_left_paren (
TOKEN_identifier n
TOKEN_binary_selector +
TOKEN_decimal_integer 2
TOKEN_right_paren )
TOKEN_right_paren )
TOKEN_binary_selector -
TOKEN_identifier temp
TOKEN_period .
TOKEN_identifier sum
TOKEN_assignment_operator :=
TOKEN_identifier sum
TOKEN_binary_selector +
TOKEN_identifier tail
TOKEN_period .
TOKEN_return_operator ^
TOKEN_identifier sum
TOKEN_right_bracket ]
TOKEN_right_bracket ]
$ $
